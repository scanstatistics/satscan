#!/bin/sh

# Check for minimum number of arguments.
REQUIRED_ARGS=1 # Script requires 3 argument
if [ $# -lt "$REQUIRED_ARGS" ]
then
  echo "Usage: `basename $0` <satscan_src directory> <boost directory> <binaries ouitput directory>])"
  echo "   example: `basename $0` /prj/satscan/build.area/satscan /prj/satscan/build.area/boost/boost_1_61_0 /prj/satscan/build.area/binaries/linux"
  exit 1
fi

(

cpp_compiler="/usr/local/gcc-4.7.2/bin/g++"
c_compiler="/usr/local/gcc-4.7.2/bin/gcc"
binaries="$3"
satscan_src="$1"
boost_src="$2"
processors="-j8"
pthread="-pthread"
lib_target="libsatscan.linux.so"

rm -f $binaries/*

echo building SaTScan for 32-bit system using gcc3.4.4
./makescript.sh $binaries/satscan_stdc++6_x86_64_32bit $satscan_src $boost_src -m32 -O3 $cpp_compiler $c_compiler $processors $pthread

echo building SaTScan shared object for 32-bit system using gcc3.4.4
./makescript.so.sh $lib_target $binaries/libsatscan_stdc++6_x86_64_32bit.so $satscan_src $boost_src -m32 -O3 $cpp_compiler $c_compiler $processors $pthread

echo building SaTScan for 64-bit system using gcc3.4.4
./makescript.sh $binaries/satscan_stdc++6_x86_64_64bit $satscan_src $boost_src -m64 -O3 $cpp_compiler $c_compiler $processors $pthread

echo building SaTScan shared object for 64-bit system using gcc3.4.4
./makescript.so.sh $lib_target $binaries/libsatscan_stdc++6_x86_64_64bit.so $satscan_src $boost_src -m64 -O3 $cpp_compiler $c_compiler $processors $pthread

) 1> build.stdout 2> build.stderr